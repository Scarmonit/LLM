#!/usr/bin/env node
/**
 * demo-mcp - MCP Server
 * Generated by MCP Doctor
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';

class DemoMcpServer {
  constructor() {
    this.server = new Server(
      {
        name: 'demo-mcp',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupHandlers();
  }

  setupHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => ({
      tools: [
        {
          name: 'hello',
          description: 'Description for hello',
          inputSchema: {
            type: 'object',
            properties: {
              input: {
                type: 'string',
                description: 'Input parameter',
              },
            },
            required: ['input'],
          },
        },
        {
          name: 'goodbye',
          description: 'Description for goodbye',
          inputSchema: {
            type: 'object',
            properties: {
              input: {
                type: 'string',
                description: 'Input parameter',
              },
            },
            required: ['input'],
          },
        }
      ],
    }));

    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case 'hello':
            return await this.hello(args);
          case 'goodbye':
            return await this.goodbye(args);
          default:
            throw new Error(`Unknown tool: ${name}`);
        }
      } catch (error) {
        return {
          content: [
            {
              type: 'text',
              text: `Error: ${error.message}`,
            },
          ],
          isError: true,
        };
      }
    });
  }

  async hello(args) {
    // TODO: Implement hello
    return {
      content: [
        {
          type: 'text',
          text: `hello executed with: ${JSON.stringify(args)}`,
        },
      ],
    };
  }

  async goodbye(args) {
    // TODO: Implement goodbye
    return {
      content: [
        {
          type: 'text',
          text: `goodbye executed with: ${JSON.stringify(args)}`,
        },
      ],
    };
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('demo-mcp MCP server running on stdio');
  }
}

const server = new DemoMcpServer();
server.run().catch(console.error);
